// <auto-generated />
using System;
using Communication.BusinessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Communication.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231018004909_add auto insert user roles")]
    partial class addautoinsertuserroles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Communication.DomainLayer.Entities.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<Guid>("RequestFromId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_from_id");

                    b.Property<Guid>("RequestToId")
                        .HasColumnType("uuid")
                        .HasColumnName("request_to_id");

                    b.HasKey("Id")
                        .HasName("pk_friendships");

                    b.HasIndex("RequestFromId")
                        .HasDatabaseName("ix_friendships_request_from_id");

                    b.HasIndex("RequestToId")
                        .HasDatabaseName("ix_friendships_request_to_id");

                    b.ToTable("friendships", (string)null);
                });

            modelBuilder.Entity("Communication.DomainLayer.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text")
                        .HasColumnName("image_uri");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_images_user_id");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Communication.DomainLayer.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Communication.DomainLayer.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8ec982d-6b26-4f6e-a1f8-aa35b9a0d043"),
                            Name = "user"
                        },
                        new
                        {
                            Id = new Guid("09c4cbdc-6f75-4fe1-a49f-9d6b1058d6d9"),
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("Communication.DomainLayer.Entities.Friendship", b =>
                {
                    b.HasOne("Communication.DomainLayer.Entities.User", "RequestFrom")
                        .WithMany("SendToBeFriends")
                        .HasForeignKey("RequestFromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_friendships_users_request_from_id1");

                    b.HasOne("Communication.DomainLayer.Entities.User", "RequestTo")
                        .WithMany("ReceiveToBeFriends")
                        .HasForeignKey("RequestToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_friendships_users_request_to_id1");

                    b.Navigation("RequestFrom");

                    b.Navigation("RequestTo");
                });

            modelBuilder.Entity("Communication.DomainLayer.Entities.Image", b =>
                {
                    b.HasOne("Communication.DomainLayer.Entities.User", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_images_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Communication.DomainLayer.Entities.User", b =>
                {
                    b.HasOne("Communication.DomainLayer.Entities.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_users_user_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Communication.DomainLayer.Entities.User", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ReceiveToBeFriends");

                    b.Navigation("SendToBeFriends");
                });
#pragma warning restore 612, 618
        }
    }
}
